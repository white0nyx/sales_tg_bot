from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message

from tgbot.keyboards.reply import cancel_button, choice_company
from tgbot.misc.states import Stages


async def set_count_sales_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã set_count_sales"""
    await message.answer(text='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–∫–∏–¥–æ–∫.\n'
                              '–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 30 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ',
                         reply_markup=cancel_button)

    await Stages.set_count_sales.set()


def register_set_count_sales_command(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã set_count_sales"""
    dp.register_message_handler(set_count_sales_command, Command('set_count_sales'))


async def set_count_sales(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–∫–∏–¥–æ–∫
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–∫–∏–¥–æ–∫ –∑–∞ —Ä–∞–∑"""
    text = message.text

    try:
        count_sales = int(text)
        if not (1 <= count_sales <= 30):
            await message.answer('üõë –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ',
                                 reply_markup=cancel_button)

        else:

            async with state.proxy() as data:
                data['count_sales'] = int(text)

            await message.answer('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', reply_markup=choice_company)
            await state.reset_state(with_data=False)

    except ValueError:
        await message.answer('üõë –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ',
                             reply_markup=cancel_button)


def register_set_count_sales(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–∫–∏–¥–æ–∫"""
    dp.register_message_handler(set_count_sales, state=Stages.set_count_sales)


def register_all_set_count_sales(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–∫–∏–¥–æ–∫"""
    register_set_count_sales_command(dp)
    register_set_count_sales(dp)
